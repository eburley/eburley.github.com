{"google":"","tagline":"code and stuff","body":"# [angularjs.org](http://angularjs.org), $watch, $event, $on, $emit - what to use when\r\n\r\nA team I work on has been using Angular's various watch and event systems for more than half a year now, and I wanted to put out some best practices that we've learned from painful experience.\r\n\r\n### When to use a watch:\r\n* when you're writing a directive and want data binding behavior\r\n* when you're watching a stateful service \r\n* when it's OK for the ui and state update to happen in a non-deterministic order\r\n\r\n### When NOT to use a watch:\r\n* when you need to orchestrate complicated data loading patterns\r\n* when you're watching the routeParams.\r\n\r\n## Best practices around watches:\r\n\r\n* check for newValue !== oldValue in the watch callback.  Watch callbacks are always called at least once.\r\nwatch functions, not properties.  You can't set breakpoints on properties\r\n\r\n* if your watcher function looks like this:\r\n\r\n``` javascript\r\n$scope.$watch(function(){return SomeService.stateValueGetter()},\r\n    function(newValue,oldValue){});\r\n```\r\n\r\njust do this:\r\n``` javascript\r\n$scope.$watch(SomeService.stateValueGetter,\r\n    function(newValue,oldValue){});\r\n```\r\n\r\n### When to use pub/sub:\r\n\r\n* when you need to let multiple subscribers know about an event and those subscribers need to do more than radiate information to their view.\r\n\r\n### When NOT to use pub/sub:\r\n\r\n* when you're watching a simple state based service and using that to update a view.\r\n* when you're writing a general purpose directive and need data binding.\r\n\r\n## Best practices around pub/sub:\r\n\r\n* encapsulate subject-specific watches using the following pattern:\r\n\r\n``` javascript \r\n// an example channel service that lets consumers\r\n// subscribe and publish for nuclear reactor meltdowns\r\n \r\nvar CoreReactorChannel = function($rootScope) {\r\n \r\n    // local constants for the message ids.  \r\n    // these are private implementation detail\r\n    var ELEVATED_CORE_TEMPERATURE_MESSAGE = \"elevatedCoreMessage\";\r\n \r\n    // publish elevatedCoreTemperature\r\n    // note that the parameters are particular to the problem domain\r\n    var elevatedCoreTemperature = function(core_id, temperature) {\r\n        $rootScope.$broadcast(ELEVATED_CORE_TEMPERATURE_MESSAGE,\r\n            {\r\n                core_id: core_id,\r\n                temperature: temperature\r\n            });\r\n    };\r\n \r\n    // subscribe to elevatedCoreTemperature event.\r\n    // note that you should require $scope first \r\n    // so that when the subscriber is destroyed you \r\n    // don't create a closure over it, and te scope can clean up. \r\n    var onElevatedCoreTemperature = function($scope, handler) {\r\n        $scope.$on(ELEVATED_CORE_TEMPERATURE_MESSAGE, function(event, message){\r\n            // note that the handler is passed the problem domain parameters \r\n            handler(core_id, temperature);\r\n        });\r\n    };\r\n\r\n    // other CoreReactorChannel events would go here.\r\n\r\n    return {\r\n        elevatedCoreTemperature: elevatedCoreTemperature,\r\n        onElevatedCoreTemperature: onElevatedCoreTemperature\r\n    };\r\n};\r\n\r\n \r\n//Usage elsewhere in the application\r\nvar MyController = function($scope, CoreReactorChannel){\r\n    // Handle core temperature changes\r\n    var onCoreTemperatureChange = function(message){\r\n\tconsole.log(message.core_id, message.temperature);\r\n    }\r\n\t\r\n    // Let the CoreReactorChannel know the temperature has changed\r\n    $scope.changeTemperature = function(core_id, temperature){\r\n        CoreReactorChannel.elevatedCoreTemperature(core_id, temperature);\r\n    }\r\n \r\n    // Listen for temperature changes and call a handler\r\n    // Note: The handler can be an inline function\r\n    CoreReactorChannel.onElevatedCoreTemperature($scope, onCoreTemperatureChange);\r\n};   \r\n```\r\n\r\n* don't mix concerns in the channel code.  A general channel is a ball of mud.\r\n\r\n***\r\n\r\n# I did a presentation: \r\n* the [slides](http://vimeo.com/57296465)\r\n* the [code](https://github.com/eburley/jasmine.presentation)\r\n","name":"eburley.github.com","note":"Don't delete this file! It's used internally to help with page regeneration."}